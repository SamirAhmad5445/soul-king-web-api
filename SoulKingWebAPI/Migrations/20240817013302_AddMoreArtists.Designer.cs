// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoulKingWebAPI.Data;

#nullable disable

namespace SoulKingWebAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240817013302_AddMoreArtists")]
    partial class AddMoreArtists
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlbumUser", b =>
                {
                    b.Property<int>("LikedAlbumsId")
                        .HasColumnType("int");

                    b.Property<int>("LikedUsersId")
                        .HasColumnType("int");

                    b.HasKey("LikedAlbumsId", "LikedUsersId");

                    b.HasIndex("LikedUsersId");

                    b.ToTable("AlbumUser");
                });

            modelBuilder.Entity("ArtistUser", b =>
                {
                    b.Property<int>("FollowedArtistId")
                        .HasColumnType("int");

                    b.Property<int>("FollowersId")
                        .HasColumnType("int");

                    b.HasKey("FollowedArtistId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("ArtistUser");
                });

            modelBuilder.Entity("PlaylistSong", b =>
                {
                    b.Property<int>("AssociatedPlaylistsId")
                        .HasColumnType("int");

                    b.Property<int>("SongsId")
                        .HasColumnType("int");

                    b.HasKey("AssociatedPlaylistsId", "SongsId");

                    b.HasIndex("SongsId");

                    b.ToTable("PlaylistSong");
                });

            modelBuilder.Entity("PlaylistUser", b =>
                {
                    b.Property<int>("SavedPlaylistsId")
                        .HasColumnType("int");

                    b.Property<int>("SavedUsersId")
                        .HasColumnType("int");

                    b.HasKey("SavedPlaylistsId", "SavedUsersId");

                    b.HasIndex("SavedUsersId");

                    b.ToTable("UserSavedPlaylist", (string)null);
                });

            modelBuilder.Entity("SongUser", b =>
                {
                    b.Property<int>("LikedSongsId")
                        .HasColumnType("int");

                    b.Property<int>("LikedUsersId")
                        .HasColumnType("int");

                    b.HasKey("LikedSongsId", "LikedUsersId");

                    b.HasIndex("LikedUsersId");

                    b.ToTable("UserLikedSongs", (string)null);
                });

            modelBuilder.Entity("SoulKingWebAPI.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("SoulKingWebAPI.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FollowersCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateOnly(1974, 4, 13),
                            Description = "A musician and swordsman who is also a skeleton.",
                            DisplayName = "Sk Brook",
                            Email = "sk.brook@strawhats.com",
                            FirstName = "Soul King",
                            FollowersCount = 0,
                            IsActivated = false,
                            LastName = "Brook",
                            PasswordHash = new byte[] { 253, 30, 181, 5, 63, 37, 191, 138, 116, 211, 190, 53, 67, 176, 41, 35, 132, 89, 244, 127, 215, 8, 135, 255, 186, 10, 78, 109, 205, 168, 136, 250, 116, 95, 122, 186, 236, 113, 235, 14, 193, 71, 120, 16, 32, 195, 141, 192, 96, 188, 13, 135, 112, 244, 164, 44, 111, 167, 4, 195, 151, 11, 192, 236 },
                            PasswordSalt = new byte[] { 120, 166, 227, 55, 190, 215, 65, 153, 197, 246, 82, 62, 75, 252, 102, 253, 3, 122, 98, 83, 234, 11, 33, 206, 36, 87, 136, 51, 164, 77, 0, 148, 145, 33, 8, 97, 92, 89, 101, 145, 245, 45, 242, 114, 45, 235, 162, 185, 225, 251, 213, 238, 130, 38, 85, 66, 230, 168, 32, 236, 171, 50, 163, 252, 81, 173, 230, 15, 68, 18, 166, 39, 2, 190, 149, 117, 220, 69, 225, 253, 117, 110, 27, 217, 107, 231, 25, 65, 173, 115, 174, 218, 42, 218, 45, 117, 43, 254, 137, 84, 245, 86, 7, 110, 210, 34, 153, 94, 78, 219, 161, 30, 133, 179, 100, 99, 208, 169, 121, 108, 48, 98, 248, 48, 8, 88, 238, 255 },
                            ProfileImage = "",
                            Token = "",
                            Username = "brook"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateOnly(1996, 8, 29),
                            Description = "Brings happiness and joy to everyone by my songs.",
                            DisplayName = "Uta",
                            Email = "uta@redhairpirates.com",
                            FirstName = "Diva",
                            FollowersCount = 0,
                            IsActivated = false,
                            LastName = "Uta",
                            PasswordHash = new byte[] { 52, 151, 163, 15, 66, 207, 39, 214, 233, 169, 119, 212, 243, 41, 20, 44, 47, 75, 195, 98, 197, 91, 4, 88, 90, 159, 87, 120, 18, 81, 19, 166, 31, 142, 205, 230, 184, 46, 208, 238, 226, 57, 184, 116, 61, 122, 58, 186, 12, 195, 159, 146, 133, 166, 148, 233, 162, 210, 79, 24, 252, 189, 195, 179 },
                            PasswordSalt = new byte[] { 198, 109, 33, 205, 151, 76, 242, 88, 250, 179, 118, 94, 238, 99, 79, 63, 40, 69, 192, 205, 132, 97, 82, 120, 172, 20, 246, 89, 243, 159, 87, 72, 92, 12, 132, 42, 70, 39, 208, 183, 135, 79, 114, 208, 159, 109, 193, 152, 36, 210, 76, 223, 99, 73, 134, 135, 156, 40, 179, 252, 239, 121, 176, 244, 179, 101, 88, 95, 102, 57, 186, 85, 184, 127, 174, 71, 69, 19, 68, 144, 131, 201, 80, 143, 88, 254, 1, 221, 223, 138, 4, 211, 65, 155, 151, 241, 252, 93, 1, 156, 168, 156, 81, 133, 20, 65, 36, 222, 83, 142, 226, 113, 249, 249, 232, 180, 153, 136, 40, 25, 71, 206, 230, 184, 142, 115, 108, 64 },
                            ProfileImage = "",
                            Token = "",
                            Username = "uta"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateOnly(1982, 3, 5),
                            Description = "A musician who uses his body as an instrument to create powerful sound-based attacks.",
                            DisplayName = "Scratchmen Apoo",
                            Email = "apoo@onairpirates.com",
                            FirstName = "Roar of the Sea",
                            FollowersCount = 0,
                            IsActivated = false,
                            LastName = "Apoo",
                            PasswordHash = new byte[] { 116, 247, 187, 38, 225, 2, 15, 175, 107, 74, 181, 73, 120, 163, 82, 52, 242, 144, 18, 109, 77, 128, 8, 220, 146, 2, 168, 103, 37, 60, 182, 241, 22, 172, 55, 211, 153, 195, 31, 60, 66, 236, 170, 63, 102, 23, 69, 84, 57, 241, 224, 7, 68, 250, 235, 198, 55, 254, 91, 175, 17, 198, 191, 242 },
                            PasswordSalt = new byte[] { 209, 237, 125, 233, 169, 177, 147, 59, 161, 173, 203, 11, 189, 104, 22, 190, 20, 7, 22, 14, 51, 196, 76, 55, 74, 254, 101, 57, 34, 158, 177, 91, 30, 46, 156, 20, 208, 222, 65, 76, 199, 142, 91, 21, 219, 139, 156, 203, 80, 103, 98, 38, 53, 108, 143, 7, 223, 211, 79, 126, 1, 242, 93, 157, 84, 52, 105, 142, 238, 19, 12, 110, 131, 141, 181, 219, 206, 54, 103, 234, 63, 23, 211, 210, 154, 134, 113, 202, 182, 249, 211, 87, 28, 200, 254, 251, 189, 198, 104, 45, 158, 188, 96, 254, 253, 250, 15, 206, 184, 123, 143, 145, 249, 97, 150, 42, 156, 45, 99, 11, 79, 110, 12, 225, 88, 84, 38, 121 },
                            ProfileImage = "",
                            Token = "",
                            Username = "apoo"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateOnly(1970, 11, 20),
                            Description = "A former stage actress and singer with a tragic past.",
                            DisplayName = "Victoria Cindry",
                            Email = "cindry@thrillerbark.com",
                            FirstName = "Stage Star",
                            FollowersCount = 0,
                            IsActivated = false,
                            LastName = "Cindry",
                            PasswordHash = new byte[] { 34, 10, 106, 165, 17, 170, 52, 17, 233, 1, 25, 198, 216, 222, 44, 114, 239, 52, 6, 11, 15, 212, 44, 232, 55, 17, 157, 221, 182, 33, 180, 197, 38, 44, 12, 9, 111, 156, 252, 49, 229, 203, 247, 206, 96, 221, 147, 25, 80, 119, 235, 42, 95, 212, 27, 188, 60, 73, 252, 106, 151, 27, 172, 69 },
                            PasswordSalt = new byte[] { 212, 236, 50, 173, 32, 152, 104, 35, 200, 103, 90, 112, 217, 25, 92, 48, 199, 47, 28, 236, 32, 27, 102, 152, 173, 190, 104, 133, 78, 44, 0, 206, 235, 10, 81, 182, 170, 128, 90, 84, 37, 7, 33, 19, 121, 174, 97, 137, 21, 89, 141, 245, 157, 37, 107, 63, 215, 237, 120, 244, 65, 130, 230, 44, 227, 129, 47, 185, 84, 31, 55, 245, 230, 68, 218, 76, 158, 157, 236, 187, 149, 174, 111, 216, 18, 124, 162, 98, 225, 141, 222, 131, 182, 229, 96, 129, 139, 165, 118, 130, 188, 141, 13, 164, 55, 215, 235, 64, 126, 185, 18, 144, 240, 159, 5, 230, 44, 99, 179, 168, 39, 133, 186, 101, 5, 233, 229, 147 },
                            ProfileImage = "",
                            Token = "",
                            Username = "cindry"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateOnly(2011, 7, 1),
                            Description = "A homie who often sings with his fellow homies Zeus and Prometheus.",
                            DisplayName = "Napoleon",
                            Email = "napoleon@bigmompirates.com",
                            FirstName = "Singing Sword",
                            FollowersCount = 0,
                            IsActivated = false,
                            LastName = "Napoleon",
                            PasswordHash = new byte[] { 245, 140, 198, 58, 255, 7, 92, 66, 244, 111, 135, 63, 245, 229, 186, 191, 61, 49, 210, 20, 75, 104, 39, 195, 106, 85, 69, 221, 159, 221, 36, 155, 37, 58, 248, 166, 155, 43, 159, 26, 90, 199, 0, 167, 177, 4, 99, 4, 0, 123, 67, 222, 185, 168, 245, 180, 21, 161, 131, 7, 110, 225, 247, 36 },
                            PasswordSalt = new byte[] { 186, 159, 3, 47, 67, 253, 172, 123, 207, 135, 236, 38, 183, 144, 73, 68, 31, 68, 134, 6, 184, 162, 93, 154, 19, 84, 211, 178, 177, 250, 18, 7, 66, 117, 243, 8, 22, 178, 180, 57, 228, 57, 176, 65, 38, 99, 92, 105, 233, 237, 40, 243, 148, 173, 101, 21, 10, 82, 242, 242, 144, 74, 92, 6, 254, 242, 227, 213, 163, 33, 101, 45, 164, 133, 183, 40, 50, 216, 220, 115, 13, 152, 11, 93, 191, 76, 76, 6, 186, 157, 188, 160, 116, 208, 53, 31, 204, 230, 12, 210, 77, 34, 165, 9, 213, 129, 156, 77, 183, 209, 179, 234, 165, 23, 10, 189, 24, 142, 87, 96, 42, 151, 59, 172, 58, 190, 103, 170 },
                            ProfileImage = "",
                            Token = "",
                            Username = "napoleon"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateOnly(1953, 5, 21),
                            Description = "A legendary pirate who may also have a passion for music.",
                            DisplayName = "Scopper Gaban",
                            Email = "gaban@rogerpirates.com",
                            FirstName = "Rock Star",
                            FollowersCount = 0,
                            IsActivated = false,
                            LastName = "Gaban",
                            PasswordHash = new byte[] { 255, 32, 154, 109, 121, 247, 120, 44, 56, 22, 220, 154, 252, 204, 62, 33, 215, 15, 18, 106, 79, 91, 171, 3, 175, 116, 235, 223, 126, 215, 248, 153, 129, 84, 203, 100, 123, 154, 44, 205, 165, 20, 159, 140, 140, 59, 41, 130, 85, 136, 38, 210, 196, 250, 163, 106, 112, 157, 178, 41, 219, 100, 39, 246 },
                            PasswordSalt = new byte[] { 21, 43, 190, 33, 241, 127, 110, 14, 65, 214, 214, 225, 70, 165, 109, 10, 84, 69, 149, 8, 6, 247, 128, 186, 98, 145, 123, 26, 173, 168, 206, 57, 99, 191, 233, 51, 121, 212, 128, 73, 247, 232, 12, 98, 134, 90, 150, 157, 180, 183, 37, 72, 237, 238, 67, 79, 41, 120, 248, 167, 212, 185, 200, 92, 189, 132, 206, 231, 254, 47, 47, 196, 119, 78, 160, 73, 136, 58, 207, 9, 201, 248, 54, 31, 173, 43, 166, 3, 78, 221, 232, 83, 222, 50, 46, 254, 205, 145, 42, 230, 141, 66, 108, 211, 216, 238, 4, 68, 196, 120, 12, 201, 131, 229, 198, 152, 88, 23, 11, 174, 128, 209, 141, 247, 39, 170, 235, 187 },
                            ProfileImage = "",
                            Token = "",
                            Username = "gaban"
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateOnly(1997, 4, 1),
                            Description = "A brave and mysterious hero with an amazing theme song.",
                            DisplayName = "Sogeking",
                            Email = "sogeking@sniperisland.com",
                            FirstName = "King of Snipers",
                            FollowersCount = 0,
                            IsActivated = false,
                            LastName = "Sogeking",
                            PasswordHash = new byte[] { 16, 86, 200, 109, 6, 91, 122, 31, 192, 68, 9, 183, 5, 168, 111, 189, 121, 17, 194, 4, 74, 212, 87, 206, 163, 160, 186, 128, 56, 249, 84, 34, 29, 93, 255, 187, 221, 242, 119, 177, 57, 130, 61, 84, 47, 125, 103, 24, 169, 196, 85, 109, 185, 96, 103, 27, 147, 223, 9, 106, 158, 114, 253, 165 },
                            PasswordSalt = new byte[] { 186, 80, 244, 76, 42, 249, 232, 103, 100, 31, 252, 43, 144, 23, 23, 159, 90, 32, 14, 30, 51, 214, 227, 88, 109, 110, 97, 229, 153, 169, 160, 145, 131, 157, 9, 120, 27, 112, 170, 148, 72, 58, 46, 240, 108, 185, 54, 157, 40, 241, 90, 210, 207, 116, 214, 68, 116, 55, 63, 66, 196, 154, 14, 16, 149, 108, 77, 253, 190, 83, 37, 184, 106, 73, 49, 151, 167, 226, 2, 137, 161, 219, 183, 133, 243, 165, 188, 52, 36, 247, 172, 202, 237, 22, 69, 211, 155, 134, 50, 203, 206, 219, 36, 202, 21, 200, 180, 98, 58, 89, 57, 255, 41, 0, 1, 183, 116, 157, 211, 124, 162, 22, 176, 201, 73, 90, 221, 185 },
                            ProfileImage = "",
                            Token = "",
                            Username = "sogeking"
                        });
                });

            modelBuilder.Entity("SoulKingWebAPI.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("SoulKingWebAPI.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("SoulKingWebAPI.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaysCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("SoulKingWebAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AlbumUser", b =>
                {
                    b.HasOne("SoulKingWebAPI.Models.Album", null)
                        .WithMany()
                        .HasForeignKey("LikedAlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoulKingWebAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("LikedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistUser", b =>
                {
                    b.HasOne("SoulKingWebAPI.Models.Artist", null)
                        .WithMany()
                        .HasForeignKey("FollowedArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoulKingWebAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlaylistSong", b =>
                {
                    b.HasOne("SoulKingWebAPI.Models.Playlist", null)
                        .WithMany()
                        .HasForeignKey("AssociatedPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoulKingWebAPI.Models.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlaylistUser", b =>
                {
                    b.HasOne("SoulKingWebAPI.Models.Playlist", null)
                        .WithMany()
                        .HasForeignKey("SavedPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoulKingWebAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("SavedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SongUser", b =>
                {
                    b.HasOne("SoulKingWebAPI.Models.Song", null)
                        .WithMany()
                        .HasForeignKey("LikedSongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoulKingWebAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("LikedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoulKingWebAPI.Models.Album", b =>
                {
                    b.HasOne("SoulKingWebAPI.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("SoulKingWebAPI.Models.Playlist", b =>
                {
                    b.HasOne("SoulKingWebAPI.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoulKingWebAPI.Models.RefreshToken", b =>
                {
                    b.HasOne("SoulKingWebAPI.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SoulKingWebAPI.Models.Song", b =>
                {
                    b.HasOne("SoulKingWebAPI.Models.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoulKingWebAPI.Models.Artist", "Artist")
                        .WithMany("Songs")
                        .HasForeignKey("ArtistId")
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("SoulKingWebAPI.Models.Album", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("SoulKingWebAPI.Models.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("SoulKingWebAPI.Models.User", b =>
                {
                    b.Navigation("Playlists");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
